shiny::runApp("app")
shiny::runApp("app")
shiny::runApp("app")
shiny::runApp("app")
shiny::runApp("app")
shiny::runApp("app")
shiny::runApp("app")
shiny::runApp("app")
shiny::runApp("app")
shiny::runApp("app")
shiny::runApp("app")
shiny::runApp("app")
#### --------------------------------------------------- 25/01/31 --------------------------------------------------- ####
d <- readxl::read_excel("data/2.full_abstracting/25_01_31_decision_progress.xlsx")
d <- d[d$final_decision != "exclude", ]
d
writexl::write_xlsx(d, "data/3.meta_data/basic_info/25_01_31_basic_info.xlsx")
#### --------------------------------------------------- 25/04/30 --------------------------------------------------- ####
d <- readxl::read_excel("data/2.full_abstracting/25_04_30_decision_progress.xlsx")
d <- d[d$final_decision != "exclude", ]
writexl::write_xlsx(d, "data/3.meta_data/basic_info/25_04_30_basic_info.xlsx")
#### --------------------------------------------------- UTILS --------------------------------------------------- ####
source(here::here("R/utils.R"))
library(tidyverse)
library(metaSEM)
#### --------------------------------------------------- UTILS --------------------------------------------------- ####
source(here::here("R/utils.R"))
# Here you can open the combined data and analyse them using metaSEM
data_url <- "https://raw.githubusercontent.com/feracotommaso/living_SEB_review/main/data/3.meta_data/meta_data/metadata.xlsx"
combined_data <- load_xlsx_url(data_url)
combined_data <- readxl::read_excel(here::here("data/3.meta_data/meta_data/25_01_31_metadata.xlsx"))
# Read and merge all basic infos
basic_info_paths <- list.files(
path = "data/3.meta_data/basic_info/",
pattern = "\\.xlsx$",
full.names = TRUE
)
all_data <- list()
for (i in seq_along(basic_info_paths)) {
all_data[[i]] <- read_excel(basic_info_paths[i])
}
basic_info_data <- do.call(rbind, all_data)
# Combine the basic info with the different matrices
matrix_paths <- list.files(path = "data/3.meta_data/matrices/", pattern = "*.xlsx", full.names = TRUE)  # Folder with correlation matrices
# Process all correlation matrices and combine them into a single dataset
combined_data <- map_dfr(matrix_paths, ~ data_combine(.x, basic_info_data))
library(readxl)
# Process all correlation matrices and combine them into a single dataset
combined_data <- map_dfr(matrix_paths, ~ data_combine(.x, basic_info_data))
library(tidyverse)
library(readxl)
source("R/utils.R")
# Read and merge all basic infos
basic_info_paths <- list.files(
path = "data/3.meta_data/basic_info/",
pattern = "\\.xlsx$",
full.names = TRUE
)
all_data <- list()
for (i in seq_along(basic_info_paths)) {
all_data[[i]] <- read_excel(basic_info_paths[i])
}
basic_info_data <- do.call(rbind, all_data)
# Combine the basic info with the different matrices
matrix_paths <- list.files(path = "data/3.meta_data/matrices/", pattern = "*.xlsx", full.names = TRUE)  # Folder with correlation matrices
# Process all correlation matrices and combine them into a single dataset
combined_data <- map_dfr(matrix_paths, ~ data_combine(.x, basic_info_data))
# Write and save the excel
writexl::write_xlsx(combined_data, "data/3.meta_data/meta_data/25_01_31_metadata.xlsx")
# Write and save the review data excel
review_data <- basic_info_data[!duplicated(basic_info_data$paper_id),]
writexl::write_xlsx(review_data, "data/3.meta_data/review_data/review_data.xlsx")
combined_data <- readxl::read_excel(here::here("data/3.meta_data/meta_data/25_01_31_metadata.xlsx"))
# Open the matrix codebook with the admissible colnames
admcol_url <- "https://raw.githubusercontent.com/feracotommaso/living_SEB_review/main/data/matrix_codebook.xlsx"
admcol <- load_xlsx_url(admcol_url)
# Prepare the list of the variables that can be used with different grain [Topic, BROAD, specific, and label]
varlist <- admcol[complete.cases(admcol[,1:4]),]
# Create a named vector from the lookup table to rename variables
labels_app <- setNames(varlist$label, varlist$column_name)
source(here::here("R/utils.R"))
library(tidyverse)
library(metaSEM)
# Here you can open the combined data and analyse them using metaSEM
.data_url <- "https://raw.githubusercontent.com/feracotommaso/living_SEB_review/main/data/3.meta_data/meta_data/metadata.xlsx"
combined_data <- load_xlsx_url(data_url)
combined_data <- load_xlsx_url(.data_url)
# Here you can open the combined data and analyse them using metaSEM
data_url <- "https://raw.githubusercontent.com/feracotommaso/living_SEB_review/main/data/3.meta_data/meta_data/metadata.xlsx"
combined_data <- load_xlsx_url(data_url)
combined_data <- readxl::read_excel(here::here("data/3.meta_data/meta_data/25_01_31_metadata.xlsx"))
# Open the matrix codebook with the admissible colnames
admcol_url <- "https://raw.githubusercontent.com/feracotommaso/living_SEB_review/main/data/matrix_codebook.xlsx"
admcol <- load_xlsx_url(admcol_url)
# Prepare the list of the variables that can be used with different grain [Topic, BROAD, specific, and label]
varlist <- admcol[complete.cases(admcol[,1:4]),]
# Create a named vector from the lookup table to rename variables
labels_app <- setNames(varlist$label, varlist$column_name)
# Pred vars are useful for selecting seb skills in meta-analysis
pred_vars <- sort(c("selfmanagement", "cooperation", "socialengagement", "innovation", "emotionalresilience"))
# Define the target variables of interest (this is reactive in shiny)
target_vars <- c("academicachievement", "selfmanagement", "socialengagement", "extraversion", "conscientiousness")
# And define the study info you want
study_info <- c("download_date","doi","year","age_class","paper_id", "matrix_id", "author_et_al", "n")
# Get the data
metaD <- getSEMdata(target_vars,combined_data,study_info) # !! This excludes rows without variables of interest
# Describe the data
pattern.na(metaD$cor_matrices, show.na = FALSE) # k cors
pattern.n(metaD$cor_matrices, metaD$basic_info$n) # n per cor
library(metafor)
out_vars <- sort(c("academicachievement"))
dm <- getMETAdata(pred_vars, out_vars, combined_data, study_info)
dm <- escalc(measure = "ZCOR", ri = value, ni = n, data = dm)
# Descriptive table for the meta-analysis
uniqueD <- dm[!duplicated(dm$matrix_id), ]
metaStudyTab <-
data.frame(StudyID = uniqueD$matrix_id,
Authors = uniqueD$author_et_al,
Year = as.character(uniqueD$year),
Age = uniqueD$age_class,
N = as.character(uniqueD$n),
doi = uniqueD$doi
)
renderTable(metaStudyTab)
# Run the meta-analysis for each skill domain
outList <- list()
metaCol <- c("b","cil","ciu","se","z","p",
"r","rcil","rciu","rpil","rpiu",
"tau2",
"k","N",
"q","qdf","qp")
metaRes <- matrix(nrow = length(pred_vars), ncol = length(metaCol))
colnames(metaRes) <- metaCol
rownames(metaRes) <- pred_vars
for (i in 1:length(pred_vars)) {
di <- dm[dm$pred == pred_vars[i] & is.na(dm$yi) == F,]
outList[[i]] <- rma.mv(yi = yi, V = vi, random = ~ 1 | paper_id / matrix_id,
test = "t", data = di)
mres <- summary(outList[[i]])
pred <- predict(mres, transf=transf.ztor)
tau2 <- sum(mres$sigma2)
metaRes[i,] <- c(mres$beta,mres$ci.lb,mres$ci.ub,mres$se,mres$zval,mres$pval,
pred$pred,pred$ci.lb,pred$ci.ub,pred$pi.lb,pred$pi.ub,
tau2,
nrow(di),sum(di$n[di$matrix_id %in% unique(di$matrix_id)]),
mres$QE,mres$QEdf,mres$QEp
)
}
names(outList) <- pred_vars
metaAnalysis <- list(metaRes = metaRes, outList = outList)
metaResTable <- data.frame(
Skill = metaRes$skill,
N = paste0(metaRes$N, " k = (", metaRes$k, ")"),
r = format(round(metaRes$r, 3),nsmall=3),
CI = paste0("[",format(round(metaRes$rcil,3),nsmall=3),"; ",
format(round(metaRes$rciu,3),nsmall=3),"]"),
se = format(round(metaRes$se,3),nsmall=3),
p = format(round(metaRes$p,4),3),
q = paste0(round(metaRes$q), "(",metaRes$qdf,")",ifelse(metaRes$qp < .01, "*", "")),
tau2 = format(round(metaRes$tau2,3),nsmall=3))
metaRes <- data.frame(metaRes)
metaRes$skill = pred_vars
metaAnalysis <- list(metaRes = metaRes, outList = outList)
metaResTable <- data.frame(
Skill = metaRes$skill,
N = paste0(metaRes$N, " k = (", metaRes$k, ")"),
r = format(round(metaRes$r, 3),nsmall=3),
CI = paste0("[",format(round(metaRes$rcil,3),nsmall=3),"; ",
format(round(metaRes$rciu,3),nsmall=3),"]"),
se = format(round(metaRes$se,3),nsmall=3),
p = format(round(metaRes$p,4),3),
q = paste0(round(metaRes$q), "(",metaRes$qdf,")",ifelse(metaRes$qp < .01, "*", "")),
tau2 = format(round(metaRes$tau2,3),nsmall=3))
# Replace factor levels
metaResTable$Skill <- labels_app[as.character(metaResTable$Skill)]
metaResTable
flextable::flextable(Table2)
flextable::flextable(metaResTable)
outcomemeta <- meta_outcome
outcomemeta <- out_vars
ggplot(metaRes, aes(x = r, y = reorder(skill,length(pred_vars):1))) +
geom_point(shape = 18,
color = "black",
size = 3) +
geom_errorbar(aes(xmin = rcil, xmax = rciu), width = 0.4, linewidth = .8) +
geom_vline(xintercept = c(.00), linetype = "dashed") +
labs(x = "Meta-analytical association", y = "Skill") +
theme_bw(base_size = 18) +
scale_x_continuous(breaks = seq(-.10,.50,by=.10)) +
annotate("text", x = ifelse(min(metaRes$rcil) > -.05, -.10,min(metaRes$rcil)),
y = length(pred_vars):1,
label = paste0(Table2$r," ",Table2$CI), hjust = "right") +
coord_cartesian(xlim = c(ifelse(min(metaRes$rcil) > -.05, -.15,
min(metaRes$rcil)),
max(metaRes$rciu)))
ggplot(metaRes, aes(x = r, y = reorder(skill,length(pred_vars):1))) +
geom_point(shape = 18,
color = "black",
size = 4) +
geom_errorbar(aes(xmin = rcil, xmax = rciu), width = 0, linewidth = .8) +
geom_vline(xintercept = c(.00), linetype = "dashed") +
labs(x = paste0("Meta-analytical association with ", outcomelabel), y = "Skill") +
theme_bw(base_size = 18) +
theme(strip.text = element_text(size = 18)) +
coord_cartesian(xlim = c(ifelse(min(metaRes$rcil) > -.05, -.15,
min(metaRes$rcil)),
max(metaRes$rciu)))
outcomelabel <- varlist$label[varlist$column_name == outcomemeta]
metaRes <- metaAnalysis$metaRes
metaRes$skill <- labels_app[as.character(metaRes$skill)]
ggplot(metaRes, aes(x = r, y = reorder(skill,length(pred_vars):1))) +
geom_point(shape = 18,
color = "black",
size = 4) +
geom_errorbar(aes(xmin = rcil, xmax = rciu), width = 0, linewidth = .8) +
geom_vline(xintercept = c(.00), linetype = "dashed") +
labs(x = paste0("Meta-analytical association with ", outcomelabel), y = "Skill") +
theme_bw(base_size = 18) +
theme(strip.text = element_text(size = 18)) +
coord_cartesian(xlim = c(ifelse(min(metaRes$rcil) > -.05, -.15,
min(metaRes$rcil)),
max(metaRes$rciu)))
ggplot(metaRes, aes(x = r, y = reorder(skill,length(pred_vars):1))) +
geom_point(shape = 18,
color = "black",
size = 4) +
geom_errorbar(aes(xmin = rcil, xmax = rciu), width = 0, linewidth = .8) +
geom_vline(xintercept = c(.00), linetype = "dashed") +
labs(x = paste0("Meta-analytical association with ", outcomelabel), y = "Skill") +
theme_bw(base_size = 18) +
theme(strip.text = element_text(size = 18)) +
annotate("text", x = ifelse(min(metaRes$rcil) > -.05, -.10,min(metaRes$rcil)),
y = length(pred_vars):1,
label = paste0(metaResTable$r," ",metaResTable$CI), hjust = "right") +
coord_cartesian(xlim = c(ifelse(min(metaRes$rcil) > -.05, -.15,
min(metaRes$rcil)),
max(metaRes$rciu)))
ggplot(metaRes, aes(x = r, y = reorder(skill,length(pred_vars):1))) +
geom_point(shape = 18,
color = "black",
size = 4) +
geom_errorbar(aes(xmin = rcil, xmax = rciu), width = 0, linewidth = .8) +
geom_vline(xintercept = c(.00), linetype = "dashed") +
labs(x = paste0("Meta-analytical association with ", outcomelabel), y = "Skill") +
theme_bw(base_size = 18) +
theme(strip.text = element_text(size = 18)) +
annotate("text", x = r,
y = length(pred_vars):1,
label = paste0(metaResTable$r," ",metaResTable$CI), hjust = "right") +
coord_cartesian(xlim = c(ifelse(min(metaRes$rcil) > -.05, -.15,
min(metaRes$rcil)),
max(metaRes$rciu)))
ggplot(metaRes, aes(x = r, y = reorder(skill,length(pred_vars):1))) +
geom_point(shape = 18,
color = "black",
size = 4) +
geom_errorbar(aes(xmin = rcil, xmax = rciu), width = 0, linewidth = .8) +
geom_vline(xintercept = c(.00), linetype = "dashed") +
labs(x = paste0("Meta-analytical association with ", outcomelabel), y = "Skill") +
theme_bw(base_size = 18) +
theme(strip.text = element_text(size = 18)) +
annotate("text", x = metaRes$r,
y = length(pred_vars):1,
label = paste0(metaResTable$r," ",metaResTable$CI), hjust = "right") +
coord_cartesian(xlim = c(ifelse(min(metaRes$rcil) > -.05, -.15,
min(metaRes$rcil)),
max(metaRes$rciu)))
ggplot(metaRes, aes(x = r, y = reorder(skill,length(pred_vars):1))) +
geom_point(shape = 18,
color = "black",
size = 4) +
geom_errorbar(aes(xmin = rcil, xmax = rciu), width = 0, linewidth = .8) +
geom_vline(xintercept = c(.00), linetype = "dashed") +
labs(x = paste0("Meta-analytical association with ", outcomelabel), y = "Skill") +
theme_bw(base_size = 18) +
theme(strip.text = element_text(size = 18)) +
annotate("text", x = metaRes$r,
y = length(pred_vars):1+.20,
label = paste0(metaResTable$r," ",metaResTable$CI), hjust = "right") +
coord_cartesian(xlim = c(ifelse(min(metaRes$rcil) > -.05, -.15,
min(metaRes$rcil)),
max(metaRes$rciu)))
ggplot(metaRes, aes(x = r, y = reorder(skill,length(pred_vars):1))) +
geom_point(shape = 18,
color = "black",
size = 4) +
geom_errorbar(aes(xmin = rcil, xmax = rciu), width = 0, linewidth = .8) +
geom_vline(xintercept = c(.00), linetype = "dashed") +
labs(x = paste0("Meta-analytical association with ", outcomelabel), y = "Skill") +
theme_bw(base_size = 18) +
theme(strip.text = element_text(size = 18)) +
annotate("text", x = metaRes$r,
y = length(pred_vars):1+.20,
label = paste0(metaResTable$r," ",metaResTable$CI), hjust = "center") +
coord_cartesian(xlim = c(ifelse(min(metaRes$rcil) > -.05, -.15,
min(metaRes$rcil)),
max(metaRes$rciu)))
shiny::runApp("app")
metaRes$r
runApp('app')
runApp('app')
ggplot(metaRes, aes(x = r, y = reorder(skill,length(pred_vars):1))) +
geom_point(shape = 18,
color = "black",
size = 4) +
geom_errorbar(aes(xmin = rcil, xmax = rciu), width = 0, linewidth = .8) +
geom_vline(xintercept = c(.00), linetype = "dashed") +
labs(x = paste0("Meta-analytical association with ", outcomelabel), y = "Skill") +
theme_bw(base_size = 20) +
theme(strip.text = element_text(size = 18)) +
annotate("text", x = metaRes$r,
y = length(pred_vars):1+.20,
label = paste0(metaRes$r," ",metaRes$CI), hjust = "center") +
coord_cartesian(xlim = c(ifelse(min(metaRes$rcil) > -.05, -.15,
min(metaRes$rcil)),
max(metaRes$rciu)))
ggplot(metaRes, aes(x = r, y = reorder(skill,length(pred_vars):1))) +
geom_point(shape = 18,
color = "black",
size = 4) +
geom_errorbar(aes(xmin = rcil, xmax = rciu), width = 0, linewidth = .8) +
geom_vline(xintercept = c(.00), linetype = "dashed") +
labs(x = paste0("Meta-analytical association with ", outcomelabel), y = "Skill") +
theme_bw(base_size = 20) +
theme(strip.text = element_text(size = 18)) +
annotate("text", x = round(metaRes$r,3),
y = length(pred_vars):1+.20,
label = paste0(metaRes$r," ",metaRes$CI), hjust = "center") +
coord_cartesian(xlim = c(ifelse(min(metaRes$rcil) > -.05, -.15,
min(metaRes$rcil)),
max(metaRes$rciu)))
metaRes$CI <- paste0("[",format(round(metaRes$rcil,3),nsmall=3),"; ",
format(round(metaRes$rciu,3),nsmall=3),"]")
ggplot(metaRes, aes(x = r, y = reorder(skill,length(pred_vars):1))) +
geom_point(shape = 18,
color = "black",
size = 4) +
geom_errorbar(aes(xmin = rcil, xmax = rciu), width = 0, linewidth = .8) +
geom_vline(xintercept = c(.00), linetype = "dashed") +
labs(x = paste0("Meta-analytical association with ", outcomelabel), y = "Skill") +
theme_bw(base_size = 20) +
theme(strip.text = element_text(size = 18)) +
annotate("text", x = round(metaRes$r,3),
y = length(pred_vars):1+.20,
label = paste0(metaRes$r," ",metaRes$CI), hjust = "center") +
coord_cartesian(xlim = c(ifelse(min(metaRes$rcil) > -.05, -.15,
min(metaRes$rcil)),
max(metaRes$rciu)))
metaRes <- metaAnalysis$metaRes
metaRes$skill <- labels_app[as.character(metaRes$skill)]
metaRes$CI <- paste0("[",format(round(metaRes$rcil,3),nsmall=3),"; ",
format(round(metaRes$rciu,3),nsmall=3),"]")
ggplot(metaRes, aes(x = r, y = reorder(skill,length(pred_vars):1))) +
geom_point(shape = 18,
color = "black",
size = 4) +
geom_errorbar(aes(xmin = rcil, xmax = rciu), width = 0, linewidth = .8) +
geom_vline(xintercept = c(.00), linetype = "dashed") +
labs(x = paste0("Meta-analytical association with ", outcomelabel), y = "Skill") +
theme_bw(base_size = 20) +
theme(strip.text = element_text(size = 18)) +
annotate("text", x = round(metaRes$r,3),
y = length(pred_vars):1+.20,
label = paste0(metaRes$r," ",metaRes$CI), hjust = "center") +
coord_cartesian(xlim = c(ifelse(min(metaRes$rcil) > -.05, -.15,
min(metaRes$rcil)),
max(metaRes$rciu)))
ggplot(metaRes, aes(x = r, y = reorder(skill,length(pred_vars):1))) +
geom_point(shape = 18,
color = "black",
size = 4) +
geom_errorbar(aes(xmin = rcil, xmax = rciu), width = 0, linewidth = .8) +
geom_vline(xintercept = c(.00), linetype = "dashed") +
labs(x = paste0("Meta-analytical association with ", outcomelabel), y = "Skill") +
theme_bw(base_size = 20) +
theme(strip.text = element_text(size = 18)) +
annotate("text", x = metaRes$r,3,
y = length(pred_vars):1+.20,
label = paste0(round(metaRes$r,3)," ",metaRes$CI), hjust = "center") +
coord_cartesian(xlim = c(ifelse(min(metaRes$rcil) > -.05, -.15,
min(metaRes$rcil)),
max(metaRes$rciu)))
ggplot(metaRes, aes(x = r, y = reorder(skill,length(pred_vars):1))) +
geom_point(shape = 18,
color = "black",
size = 4) +
geom_errorbar(aes(xmin = rcil, xmax = rciu), width = 0, linewidth = .8) +
geom_vline(xintercept = c(.00), linetype = "dashed") +
labs(x = paste0("Meta-analytical association with ", outcomelabel), y = "Skill") +
theme_bw(base_size = 30) +
theme(strip.text = element_text(size = 18)) +
annotate("text", x = metaRes$r,3,
y = length(pred_vars):1+.20,
label = paste0(round(metaRes$r,3)," ",metaRes$CI), hjust = "center") +
coord_cartesian(xlim = c(ifelse(min(metaRes$rcil) > -.05, -.15,
min(metaRes$rcil)),
max(metaRes$rciu)))
ggplot(metaRes, aes(x = r, y = reorder(skill,length(pred_vars):1))) +
geom_point(shape = 18,
color = "black",
size = 4) +
geom_errorbar(aes(xmin = rcil, xmax = rciu), width = 0, linewidth = .8) +
geom_vline(xintercept = c(.00), linetype = "dashed") +
labs(x = paste0("Meta-analytical association with ", outcomelabel), y = "Skill") +
theme_bw(base_size = 25) +
theme(strip.text = element_text(size = 28)) +
annotate("text", x = metaRes$r,3,
y = length(pred_vars):1+.20,
label = paste0(round(metaRes$r,3)," ",metaRes$CI), hjust = "center") +
coord_cartesian(xlim = c(ifelse(min(metaRes$rcil) > -.05, -.15,
min(metaRes$rcil)),
max(metaRes$rciu)))
ggplot(metaRes, aes(x = r, y = reorder(skill,length(pred_vars):1))) +
geom_point(shape = 18,
color = "black",
size = 4) +
geom_errorbar(aes(xmin = rcil, xmax = rciu), width = 0, linewidth = .8) +
geom_vline(xintercept = c(.00), linetype = "dashed") +
labs(x = paste0("Meta-analytical association with ", outcomelabel), y = "Skill") +
theme_bw(base_size = 25) +
theme(strip.text = element_text(size = 48)) +
annotate("text", x = metaRes$r,3,
y = length(pred_vars):1+.20,
label = paste0(round(metaRes$r,3)," ",metaRes$CI), hjust = "center") +
coord_cartesian(xlim = c(ifelse(min(metaRes$rcil) > -.05, -.15,
min(metaRes$rcil)),
max(metaRes$rciu)))
ggplot(metaRes, aes(x = r, y = reorder(skill,length(pred_vars):1))) +
geom_point(shape = 18,
color = "black",
size = 4) +
geom_errorbar(aes(xmin = rcil, xmax = rciu), width = 0, linewidth = .8) +
geom_vline(xintercept = c(.00), linetype = "dashed") +
labs(x = paste0("Meta-analytical association with ", outcomelabel), y = "Skill") +
theme_bw(base_size = 25) +
theme(strip.text = element_text(size = 148)) +
annotate("text", x = metaRes$r,3,
y = length(pred_vars):1+.20,
label = paste0(round(metaRes$r,3)," ",metaRes$CI), hjust = "center") +
coord_cartesian(xlim = c(ifelse(min(metaRes$rcil) > -.05, -.15,
min(metaRes$rcil)),
max(metaRes$rciu)))
runApp('app')
runApp('app')
runApp('app')
runApp('app')
outList
x = "cooperation"
forest(outList[[x]], slab = outList[[x]]$data$matrix_id)
forest(outList[[x]], slab = paste0(outList[[x]]$data$author_et_al, " ",
outList[[x]]$data$year, " ",
outList[[x]]$data$matrix_id),
header = T,
main = paste0(outList[[x]]$data$pred[1]))
forest(outList[[x]], slab = paste0(outList[[x]]$data$author_et_al, " ",
#                                   outList[[x]]$data$year, " ",
outList[[x]]$data$matrix_id),
header = T,
main = paste0(x))
# --------------------------------------------------- MA-SEM --------------------------------------------------- ####
## data ####
ktab<-pattern.na(metaD$cor_matrices, show.na = FALSE) # k cors
rownames(ktab) <- paste0(1:nrow(ktab),".",rownames(ktab))
colnames(ktab) <- paste0(1:ncol(ktab),".")
ktab
# n table
ntab<-pattern.n(metaD$cor_matrices, metaD$basic_info$n) # k cors
rownames(ntab) <- paste0(1:nrow(ntab),".",rownames(ntab))
colnames(ntab) <- paste0(1:ncol(ntab),".")
ntab
# studies tab
data.frame(
# Dataset = metaD()$basic_info$download_date,
StudyID = metaD$basic_info$matrix_id,
Authors = metaD$basic_info$author_et_al,
Year = as.character(metaD$basic_info$year),
Age = as.character(metaD$basic_info$age_class),
N = metaD$basic_info$n,
doi = metaD$basic_info$doi
)
summary(cfa1)
# Fit the first step to estimate the weighted correlation matrix
cfa1 <- metaSEM::tssem1(metaD$cor_matrices, metaD$basic_info$n)
summary(cfa1)
corrplot::corrplot(x, method = "ellipse",
addCoef.col = "black",
tl.col = "black", tl.srt = 45)
x <- round(metaSEM::vec2symMat(coef(cfa1,"fixed"),diag=FALSE),3)
dimnames(x) <- list(rownames(metaD$cor_matrices[[1]]),
rownames(metaD$cor_matrices[[1]]))
x
corrplot::corrplot(x, method = "ellipse",
addCoef.col = "black",
tl.col = "black", tl.srt = 45)
x
names(x) <- labels_app[as.character(names(x))]
x
x <- round(metaSEM::vec2symMat(coef(cfa1,"fixed"),diag=FALSE),3)
dimnames(x) <- list(rownames(metaD$cor_matrices[[1]]),
rownames(metaD$cor_matrices[[1]]))
old_names <- rownames(metaD$cor_matrices[[1]])
old_names
new_names <- labels_app[old_names]
new_names
dimnames(x) <- list(new_names, new_names)
x
dimnames(x) <- rep(list(labels_app[rownames(metaD$cor_matrices[[1]])]), 2)
metaResTable$Skill <- labels_app[as.character(metaResTable$Skill)]
x <- round(metaSEM::vec2symMat(coef(cfa1,"fixed"),diag=FALSE),3)
dimnames(x) <- rep(list(labels_app[rownames(metaD$cor_matrices[[1]])]), 2)
x
runApp('app')
